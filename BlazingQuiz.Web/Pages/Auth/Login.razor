@page "/auth/login"

@layout EmptyLayout
@inject NavigationManager NavigationManager
@inject IAuthApi AuthApi

@inject QuizAuthStateProvider QuizAuthStateProvider

<div class="container">
    <div class="row vh-100">
        <div class="col-sm-4 mx-auto my-auto">

            <div class="my-3">
                <h1>Login | Blazing Quiz</h1>
            </div>
            <AuthorizeView>
                <Authorizing>
                    <p>Authorizing...</p>
                </Authorizing>

                <Authorized>
                    <p>You are authorized!</p>
                </Authorized>

                <NotAuthorized>
                    <p>Not Authorized: @context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value </p>
                </NotAuthorized>
            </AuthorizeView>
            <EditForm Model="_model" OnValidSubmit="LoginAsync">
                <DataAnnotationsValidator/>

                <div class="mb-3">
                    <label class="form-label">UserName:</label>
                    <InputText @bind-Value="_model.UserName" class="form-control" />
                    <ValidationMessage For="()=>_model.UserName" />
                </div>                
                <div class="mb-3">
                    <label class="form-label">Password:</label>
                    <InputText type="password" @bind-Value="_model.Password" class="form-control" />
                    <ValidationMessage For="()=>_model.Password" />

                </div>

                @if(_error != null)
                {
                    <div class="mb-3 bg-danger text-white p-3" role="alert">
                        <p>@_error</p>
                    </div>
                }

                <div class="mb-3">
                    @if (_isBusy)
                    {
                        <button type="button" disabled class="btn btn-success">Logining...</button>
                    }
                    else{
                        <button type="submit" class="btn btn-success">Login</button>

                    }
                </div>

            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginDto _model = new();
    private bool _isBusy;
    private string? _error;

    private async Task LoginAsync()
    {
        _isBusy = true;
        _error = null;

        try
        {
            var authresponse = await AuthApi.LoginAsync(_model);
            if (authresponse.HasError)
            {
                _error = authresponse.ErrorMessage;
                return;
            }
            var loggedInUser = authresponse.User;
            await QuizAuthStateProvider.SetLoginAsync(loggedInUser);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }

        finally
        {
            _isBusy = false;
        }

    }

}
